---
import { Image } from "astro:assets";
import s1 from "../../assets/company/company-logo1.svg";
import s2 from "../../assets/company/company-logo2.svg";
import s3 from "../../assets/company/company-logo3.svg";
import s4 from "../../assets/company/company-logo4.svg";
import s5 from "../../assets/company/company-logo5.svg";
import s6 from "../../assets/company/company-logo6.svg";
import Section from "./Section.astro";

const sponsors = [
  { logo: s6, alt: "Amazon logo" },
  { logo: s5, alt: "Dribble logo" },
  { logo: s4, alt: "HubSpot logo" },
  { logo: s3, alt: "Notion logo" },
  { logo: s2, alt: "Netflix logo" },
  { logo: s1, alt: "Zoom logo" },
];
---

<Section id="sponsors">
  <div class="flex-row items-center">
    <div class="grid grid-cols-3 sm:grid-cols-3 md:grid-cols-6">
      {
        sponsors.map((sponsor, index) => {
          return (
            <div class={`sponsor-item p-4 grayscale transition duration-200 hover:grayscale-0`} data-index={index}>
              <Image src={sponsor.logo} class="h-12 w-auto mx-auto" alt={sponsor.alt} loading="lazy" />
            </div>
          );
        })
      }
    </div>
  </div> 
</Section>

<style>
  .sponsor-item {
    opacity: 0;
    transform: translateX(-50px);
    transition: all 0.6s ease-out;
  }

  .sponsor-item.animate {
    opacity: 1;
    transform: translateX(0);
  }

  /* Alternate animation direction for visual interest */
  .sponsor-item[data-index="1"],
  .sponsor-item[data-index="3"],
  .sponsor-item[data-index="5"] {
    transform: translateX(50px);
  }

  .sponsor-item[data-index="1"].animate,
  .sponsor-item[data-index="3"].animate,
  .sponsor-item[data-index="5"].animate {
    transform: translateX(0);
  }
</style>

<script>
  function setupSponsorsAnimation() {
    const sponsorItems = document.querySelectorAll('.sponsor-item');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const index = parseInt(entry.target.getAttribute('data-index') || '0');
          
          // Add staggered delay based on index
          setTimeout(() => {
            entry.target.classList.add('animate');
          }, index * 100);
          
          // Stop observing once animated
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    sponsorItems.forEach((item) => {
      observer.observe(item);
    });
  }

  // Run on page load
  setupSponsorsAnimation();
  
  // Run on page swap for Astro navigation
  document.addEventListener('astro:after-swap', setupSponsorsAnimation);
</script>
</Section>